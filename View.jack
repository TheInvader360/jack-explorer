class View {
    field Model model;

    constructor View new(Model aModel) {
        let model = aModel;
        return this;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method void draw() {
        var int x, y, tile;
        var Map map;
        var Player player;

        let map = model.getMap(); // chained method calls aren't supported (i.e. model.getMap().getTile() fails)
        let player = model.getPlayer(); // chained method calls aren't supported (i.e. model.getPlayer().getX() fails)

        // clear the screen
        do Screen.setColor(false);
        do Screen.drawRectangle(0, 0, 511, 255);

        // draw the map
        do Screen.setColor(true);
        let x = 0;
        let y = 0;
        while (y < 10) {
            while (x < 16) {
                let tile = map.getTile(x, y);
                if (tile = 98) { // b = blocked
                    // do Screen.drawRectangle(x * 16, y * 16, (x * 16) + 15, (y * 16) + 15);
                    do Sprites.drawTreeBushy(x + (y * 512));
                }
                let x = x + 1;
            }
            let y = y + 1;
            let x = 0;
        }

        // draw the player
        if (player.getDir() = Direction.U()) {
            do Sprites.drawPlayerU(player.getX() + (player.getY() * 512));
        }
        if (player.getDir() = Direction.D()) {
            do Sprites.drawPlayerD(player.getX() + (player.getY() * 512));
        }
        if (player.getDir() = Direction.L()) {
            do Sprites.drawPlayerL(player.getX() + (player.getY() * 512));
        }
        if (player.getDir() = Direction.R()) {
            do Sprites.drawPlayerR(player.getX() + (player.getY() * 512));
        }
        return;
    }
}
