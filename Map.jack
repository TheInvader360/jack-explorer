class Map {
    field Array tiles; // the map's tiles (16x10 grid)
    field int linkedRoomU;
    field int linkedRoomD;
    field int linkedRoomL;
    field int linkedRoomR;

    constructor Map new() {
        let tiles = Array.new(160);
        do clear();
        return this;
    }

    method void dispose() {
        do tiles.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void loadLinkedRoom(Direction d) {
        if (d = Direction.U()) {
            do load(linkedRoomU);
        }
        if (d = Direction.D()) {
            do load(linkedRoomD);
        }
        if (d = Direction.L()) {
            do load(linkedRoomL);
        }
        if (d = Direction.R()) {
            do load(linkedRoomR);
        }
        return;
    }

    method void load(int roomID) {
        do clear();
        if (roomID = 1) {
            do parseTileData("bbbbbbbbbbbbbbbbb              bb              bb              bb              bb              bb              bb              bb              bb              b");
            let linkedRoomU = -1;
            let linkedRoomD = 4;
            let linkedRoomL = -1;
            let linkedRoomR = 2;
        }
        if (roomID = 2) {
            do parseTileData("bbbbbbbbbbbbbbbbb              bb              bb              bb              bb              bb              bb              bb              bb              b");
            let linkedRoomU = -1;
            let linkedRoomD = 5;
            let linkedRoomL = 1;
            let linkedRoomR = -1;
        }
        if (roomID = 4) {
            do parseTileData("b              bb              bb              bb              bb               b               b               b               b               bbbbbbbbbbbbbbbb");
            let linkedRoomU = 1;
            let linkedRoomD = -1;
            let linkedRoomL = -1;
            let linkedRoomR = 5;
        }
        if (roomID = 5) {
            do parseTileData("b              bb              bb              bb              b               b               b               b               b               bbbbbbbbbbbbbbbbb");
            let linkedRoomU = 2;
            let linkedRoomD = -1;
            let linkedRoomL = 4;
            let linkedRoomR = -1;
        }
        return;
    }

    method void clear() {
        var int i;
        let i = 0;
        while (i < 160) {
            let tiles[i] = 0;
            let i = i + 1;
        }
        return;
    }

    method void parseTileData(String encoded) {
        var int x, y;
        var char val;
        let x = 0;
        let y = 0;
        while (y < 10) {
            while (x < 16) {
                let tiles[(y * 16) + x] = encoded.charAt((y * 16) + x);
                let x = x + 1;
            }
            let y = y + 1;
            let x = 0;
        }
        return;
    }

    method int getTile(int x, int y) {
        return tiles[(y * 16) + x];
    }

}
