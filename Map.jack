class Map {
    field Array tiles; // the map's tiles (16x10 grid)
    field int numTeleporters;
    field Array teleporters;
    field int currentRoom;
    field int linkedRoomU;
    field int linkedRoomD;
    field int linkedRoomL;
    field int linkedRoomR;
    field String room1;
    field String room2;
    field String room4;
    field String room5;
    field String room6;

    constructor Map new() {
        let tiles = Array.new(160);
        let numTeleporters = 2;
        let teleporters = Array.new(numTeleporters);
        do clear();
        let room1 = "mmmmmmmmmmmmmmffmmmmmmmmmmmbbbffmmmmmmm---bbbbdfmmmmwvvvvxbbcbbfmm--pqtttu-bbb-fmm---stttyx-b--fmm---poooqyx---fmm-------pqu--gfm---------pr--ffm-------------ff";
        let room2 = "ffffffffffffffffffffffffffffffffffe-idfffffffffffe------dfaffffffk-----------dfff-------------fffh-----------ifffffffh--------ffffffffh-------fffffffffk------ff";
        let room4 = "l-------------ffl----b------b-ffllb-----------ffll----l-------dfll---ll--------dlll--ll--b---b--lllj-lll--------lll--lll--------llllllllll---b--llllllllllllllll";
        let room5 = "fffffff------ifffffffffi------ffffffffe------gffffffff-------ffffffffe------gfff-dffe-------ffff-----------gffff---------igfffff--------gfffffffllllllgfffffffff";
        let room6 = "nnnnnnnnnnnnnnnnnnnfffffffffffnnnnfek---k---idfnnnf--kk-------fnnnf--i-k---k--fnnnf-i----k----fnnnf-------k-igfnnnfh------k-kfnnnnnffffh-gffffnnnnnnnnnf-fnnnnnn";
        let teleporters[0] = Teleporter.new(10, 3, 2, 8, 8, 6, Direction.U());
        let teleporters[1] = Teleporter.new(8, 9, 6, 10, 4, 2, Direction.D());
        return this;
    }

    method void dispose() {
        do tiles.dispose();
        do room1.dispose();
        do room2.dispose();
        do room4.dispose();
        do room5.dispose();
        do room6.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void load(int roomID) {
        do clear();
        if (roomID = 1) {
            do parseTileData(room1);
            let linkedRoomU = 0;
            let linkedRoomD = 4;
            let linkedRoomL = 0;
            let linkedRoomR = 2;
        }
        if (roomID = 2) {
            do parseTileData(room2);
            let linkedRoomU = 0;
            let linkedRoomD = 5;
            let linkedRoomL = 1;
            let linkedRoomR = 0;
        }
        if (roomID = 4) {
            do parseTileData(room4);
            let linkedRoomU = 1;
            let linkedRoomD = 0;
            let linkedRoomL = 0;
            let linkedRoomR = 5;
        }
        if (roomID = 5) {
            do parseTileData(room5);
            let linkedRoomU = 2;
            let linkedRoomD = 0;
            let linkedRoomL = 4;
            let linkedRoomR = 0;
        }
        if (roomID = 6) {
            do parseTileData(room6);
            let linkedRoomU = 0;
            let linkedRoomD = 0;
            let linkedRoomL = 0;
            let linkedRoomR = 0;
        }
        let currentRoom = roomID;
        return;
    }

    method void clear() {
        var int i;
        let i = 0;
        while (i < 160) {
            let tiles[i] = 0;
            let i = i + 1;
        }
        return;
    }

    method void parseTileData(String encoded) {
        var int x, y;
        var char val;
        let x = 0;
        let y = 0;
        while (y < 10) {
            while (x < 16) {
                let tiles[(y * 16) + x] = encoded.charAt((y * 16) + x);
                let x = x + 1;
            }
            let y = y + 1;
            let x = 0;
        }
        return;
    }

    method int getTile(int x, int y) {
        return tiles[(y * 16) + x];
    }

    method int getCurrentRoom() {
        return currentRoom;
    }

    method Teleporter getTeleporter(int x, int y) {
        var Teleporter t;
        var int i;
        let i = 0;
        while (i < numTeleporters) {
            let t = teleporters[i];
            if ((t.getRoom() = currentRoom) & (t.getX() = x) & (t.getY() = y)) {
                return t;
            }
            let i = i + 1;
        }
        return null;
    }

    method int getLinkedRoom(Direction d) {
        var int room;
        let room = 0;
        if (d = Direction.U()) {
            let room = linkedRoomU;
        }
        if (d = Direction.D()) {
            let room = linkedRoomD;
        }
        if (d = Direction.L()) {
            let room = linkedRoomL;
        }
        if (d = Direction.R()) {
            let room = linkedRoomR;
        }
        return room;
    }
}
